[["index.html", "Automating Winsteps Output with winstepsR Preface", " Automating Winsteps Output with winstepsR Jeffrey Snowden 2024-05-25 Preface Welcome to “Automating Winsteps Output with winstepsR.” This book provides a comprehensive guide to using the winstepsR package to automate the generation of output files from Winsteps. In the following chapters, you will learn how to create control files, process datasets, and generate extensive output files without manually opening Winsteps. The book is structured as follows: Chapter 1: Chapter 2: Chapter 3: Let’s get started! "],["introduction-basics.html", "Chapter 1 Introduction &amp; Basics 1.1 Install from Github 1.2 Sample Data 1.3 Getting Started 1.4 winstepsR Functions", " Chapter 1 Introduction &amp; Basics Welcome to the user guide for the winstepsR package. This guide will show you how to install and use the package step by step. 1.1 Install from Github winstepsR is currently hosted on Github. To download it you first need to install the remotes package and load it into your library. install.packages(&quot;remotes&quot;) library(remotes) Now you can use the remotes package to install winstepsR and add it to your library. remotes::install_github(&quot;J-Snowden/winstepsR&quot;) library(winstepsR) In future sessions, after you have installed the package, you will only need to load it into your library using library(winstepsR). However, if the package has been updated you will need to install it again using remotes::install_github(\"J-Snowden/winstepsR\"). 1.2 Sample Data The package includes a sample data set with randomly generated values which will be used for examples in this guide. The data set is named sampledata. You can see an what it looks like using head(sampledata) to see the first 10 rows: ## ID Dicot_1 Dicot_2 Dicot_3 Dicot_4 Dicot_5 Likert_1 Likert_2 Likert_3 ## 1 1 1 1 0 0 1 2 4 2 ## 2 2 1 1 0 1 1 1 4 4 ## 3 3 0 1 0 0 1 1 2 1 ## 4 4 1 1 0 0 1 1 1 1 ## 5 5 1 1 0 1 1 3 3 3 ## 6 6 1 0 0 0 0 4 4 4 ## Likert_4 Likert_5 Likert10_1 Likert10_2 Likert10_3 Likert10_4 Likert10_5 ## 1 3 4 3 6 6 7 5 ## 2 1 2 3 7 2 1 1 ## 3 1 2 10 10 1 2 7 ## 4 1 1 2 5 5 3 6 ## 5 3 2 6 6 9 3 8 ## 6 4 4 5 8 4 6 4 ## Demo_1 Demo_2 ## 1 0 1 ## 2 0 2 ## 3 1 1 ## 4 1 3 ## 5 1 3 ## 6 0 1 samepledata includes three sets of items, one with dichotomous values (0, 1), one with Likert style responses with values ranging from 0 to 6, and one with Likert style responses ranging from 0 to 10. There are also two columns that represent demographic data for use when examining DIF. 1.3 Getting Started 1.3.1 Creating a Project and Setting your working directory To start a new project in RStudio, go to File &gt; New Project... and follow the prompts to create a new directory for your project. Once your project is set up, you can use the here package to manage your working directory. This package helps you avoid issues with setting working directories manually. First, install and load the here package: install.packages(&quot;here&quot;) library(here) Then, you can set your working directory using here::here(), which sets the working directory to the root of your project: # Load the here package library(here) # Set the working directory to the root of your project setwd(here::here(&quot;Rasch/Example&quot;)) Using here::here() ensures that your file paths are always relative to the project root, making your code more robust and portable. Important Note: When creating a folder to use with this package there cannot be any spaces in the folder name. Some functions use batch files with Winsteps to create files, and the process will fail if there are spaces in any folder names. 1.3.2 Loading in your own data You can load in your own data to R using various packages depending on the type of your data. Examples for Excel (.xlsx) and SPSS (.sav) are provided below. 1.3.2.1 Excel First, you need to install the readxl package if you haven’t already: install.packages(&quot;readxl&quot;) library(readxl) After installing the package, you can use the read_excel function to read data from an Excel file. Here’s an example: Replace 'path/to/your/file.xlsx' with the actual path to your Excel file: excel_data &lt;- read_excel(\"path/to/your/file.xlsx\") 1.3.2.2 SPSS To load data from SPSS .sav files, we can use the haven package, which provides functions to read data from various formats, including SPSS, Stata, and SAS. First, you need to install the haven package if you haven’t already: install.packages(&quot;haven&quot;) library(haven) After installing the package, you can use the read_sav function to read data from an SAV file. Here’s an example: Replace 'path/to/your/file.sav' with the actual path to your SAV file: sav_data &lt;- read_sav(\"path/to/your/file.sav\") 1.3.3 Selecting the data you want to use To select specific columns from your dataset, you can use the dplyr package with is included with the tidyverse package. This package provides a set of functions that are designed to make data manipulation easy and intuitive. For our first example we will use the dichotomous items from the sampledata dataset. dicot &lt;- sampledata %&gt;% select(ID, Dicot1:Dicot8) dicot &lt;- sampledata %&gt;%: This line creates a new dataset called dicot from the existing dataset sampledata. The %&gt;% symbol is known as the “pipe” operator and is used to pass the data from the left-hand side to the function on the right-hand side. select(ID, Dicot1:Dicot8): This part of the code is used to select specific columns from the dataset. The select function from the dplyr package allows you to specify which columns you want to keep in the new dataset: ID: Selects the column named ID. Dicot1:Dicot8: Selects all columns from Dicot1 to Dicot8. 1.3.4 Dataset Requirements To run functions within winstepsR, your dataset needs to meet certain requirements. Specifically, the dataset should have: An identifier column: This column should contain unique identifiers for each row of data (e.g., participant IDs). Numeric data columns: Data you want to process needs to be whole numeric values ranging from 0 to 99. Values larger than 2 digits or with decimals are not currently supported. Ensuring your dataset is structured in this way will allow the functions within winstepsR to operate correctly. 1.4 winstepsR Functions Currently, the winstepsR package has five functions. The first two interface with Winsteps to run analyses and output files. The remaining three work with Winsteps output files in R to process or clean data for further use. r_control_file: Creates a Winsteps control file using data in R. winsteps_output: Uses Winsteps batch processing to output tables and files. filter_zresid: Uses a Winsteps observation file to filter out unexpected responses based on Z-residual values. clean_dif: Cleans Winsteps DIF files to only show significant DIF. psychometrics_table: Processes Winsteps tables and person files into an organized psychometrics table. "],["basic-control-files-and-batch-processing.html", "Chapter 2 Basic Control Files and Batch Processing 2.1 r_control_file 2.2 winsteps_output", " Chapter 2 Basic Control Files and Batch Processing 2.1 r_control_file The first function we will use is r_control_file, which takes a dataset in R and creates a WINSTEPS control text file in your working directory. The structure of the function looks like this: r_control_file &lt;- function(name, df, first_item, num_items, person_id_col, ..., groups = NULL, irefer = NULL, ifile = NULL, sfile = NULL, demographics = NULL, key = NULL) r_control_file has 5 required arguments and 6 optional arguments, which we will cover later. The required arguments are: name: The name you want to save the control file as. Because this is a string it must be enclosed in quotes. df: An R data frame object containing your dataset. first_item: The numeric column location of the first item in your dataset. num_items: The number of items you want to add to the control file. These items must be in columns that follow the first item you specify. person_id_col: The name of the column where person identifiers (IDs) are located. Because this is a string it must be enclosed in quotes. Using our sample data, running the function looks like this: r_control_file(&quot;dicot&quot;, dicot, 2, 8, &quot;ID&quot;) Here, we have named the control file \"dicot\" and used the existing R data dicot. The control file name can be different from the R data, but naming it the same can avoid confusion later. The number 2 tells the function that the first item appears in the second column while the 8 tells the function that there are eight items. \"ID\" tells the function that the identifier column is named “ID”. Upon running this function a new control file is generated in your working directory named dicot_cf_r.txt. This control file can be loaded manually using WINSTEPS and works as if you had created the file manually through Winsteps. Optional arguments that let you create more complex and customized control files are cover in a later chapter. 2.2 winsteps_output This function uses a Winsteps control file, created using this package or created manually, to automatically create and save Winsteps output files. It does by creating, running, then deleting a batch file. A batch file is a script that automates the execution of commands in sequence. With Winsteps, batch files enable running multiple analyses with minimal user interaction to run tasks in the background. More information can be found on the Winsteps website at Winsteps Batch Processing documentation. The structure of the function looks like this: winsteps_output &lt;- function(ctrlfile, shortname, ..., tables = NULL, files = NULL, dif = NULL, ifile = NULL, sfile = NULL) winsteps_output has 2 required arguments and 5 optional arguments. The required arguments are: ctrlfile: This is the name of the control file, it needs to include the filetype at the end (.txt). Because this is a string it must be enclosed in quotes. shortname: This is the name you want all of the output files to have, I often set it to the same name as the data. Because this is a string it must be enclosed in quotes. The optional arguments specific which files you want Winsteps to create. You can run the function without an optional argument but nothing will be saved. tables: The tables you want to be saved. In Winsteps these are found under the Output Tables menu. You can find an index of tables on the Winsteps website. files: The files you want to be saved. Because these are strings, they must be enclosed in quotes. In Winsteps these are found under the Output Files menu. You can find an index of files on the Winsteps website. dif: Column names for DIF files you want to output. (This will be covered in more depth in another section). ifile: File name for an anchoring IFILE you want to be used in processing the tables or files (This will be covered in more depth in another section). sfile: File name for an anchoring SFILE you want to be used in processing the tables or files (This will be covered in more depth in another section). If you only want one table or file to be created you can run the function with arguments like tables = 3 or files = \"xfile\". However, if you want multiple tales or files you need to specify them inside a c() function, which combines multiple elements into a vector. For example, to create multiple tables, you would use tables = c(3, 10, 12, 14, 23), and to create multiple files, you would use files = c(\"pfile\", \"xfile\"). This tells the function to generate all specified tables or files. Using our sample data, running the function looks like this: winsteps_output(&quot;dicot_cf_r.txt&quot;, &quot;dicot&quot;, tables = c(3, 10, 12, 14, 23), files = c(&quot;pfile&quot;, &quot;xfile&quot;)) Here, we have told the function to use the control file in our working directory named \"dicot_cf_r.txt\". The \"dicot\" specifics the naming convention that will be use in output tables and files. The optional argument tables = c(3, 10, 12, 14, 23) tells the function we want it to process and save tables 3, 10, 12, 14 and 23. The optional argument files = c(\"pfile\", \"xfile\") tells the function we want it to process and save a person file (pfile) and an observation file (xfile). Inside your working directory the function creates and runs a batch file. In the R console you can see the commands the batch file is running. C:\\Users\\sample_user\\Desktop\\sample_project&gt;START /w C:\\winsteps\\WINSTEPS BATCH=YES C:/Users/sample_user/Desktop/sample_project/dicot_cf_r.txt C:/Users/sample_user/Desktop/sample_project/dicot_Table_3.txt TABLES=001 It first uses your working directory as a starting place and tells Winsteps it is going to use batch processing. It then tells Winsteps to open the requested control file, then to save table 001, or table 3, as dicot_Table_3.txt. It repeats this process for each requested table or file. Once the batch file has finished processing it deletes itself. After running this command we now have 5 tables saved as text files along with a person file and observation file saved as Excel files. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
